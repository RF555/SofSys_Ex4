@startuml

'graph -> edge_list
'graph -> node_list
'node_list --> node
'edge_list --> edge
'algo --> graph


class node{
int id;
edge_list in_edges;
edge_list out_edges;
node *prev_n;
node *next_n;
node *gen_node(int id_);
int free_n(node *n);
}

class edge{
int src;
float w;
int dest;
edge *prev_e;
edge *next_e;
edge *gen_edge(int src_, float w_, int dest_);
}

class graph{
node_list nodes;
edge_list edges;
int node_size;
int edge_size;
int init_graph();
'void add_node(graph *g, int id);
'void remove_node(graph *g, int id);
'void add_edge(graph *g, int src, float w, int dest);
'void add_Edge(graph *g, edge e);
'void remove_edge(graph *g, int src, int dest);
}

class ?node_list?{
node *n_root;
node *n_tail;
int size;
int init_node_list(node_list *n_list);
int set_n_root(node *n);
int set_n_tail(node *n);
int add_node(node_list *n_list, int id_);
int remove_node(node_list *n_list, int id_);
int free_node_list(node_list *n_list);
}
class edge_list{
edge *e_root;
edge *e_tail;
int size;
p_e_list init_edge_list();
int set_e_root(p_e_list pe_list, edge *e);
int set_e_tail(p_e_list pe_list, edge *e);
p_edge search_e(p_e_list pe_list, edge *e);
int push_edge(p_e_list pe_list, int src_, float w_, int dest_);
void pop_e_root(p_e_list pe_list);
void pop_e_tail(p_e_list pe_list);
void pop_e(p_e_list pe_list, edge *e_);
int free_edge_list(p_e_list pe_list);
}

class algo{
int A(graph *g, string input);
int B(graph *g, string input);
int D(graph *g, string input);
float Shortest_path(graph *g, string input);
int TSP(graph *g, string input);
}

@enduml