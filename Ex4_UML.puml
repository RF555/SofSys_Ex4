@startuml

graph -> edge_arr
graph -> node_arr
node_arr --> node
edge_arr --> edge
algo --> graph


class node{
int id;
edge_arr in_edges;
edge_arr out_edges;
node *gen_node(node *n, int id);
}

class edge{
int src;
float w;
int dest;
edge *gen_edge(edge *e, int src, float w, int dest);
}

class edge_arr{
edge *arr;
int used;
int size;
void init_edge_arr(edge_arr *arr, int init_size);
'void add_edge(edge_arr *arr, edge e);
'void remove_edge(edge_arr *arr, edge e);
void free_edge_arr(edge_arr *arr);
}

class node_arr{
node *arr;
int used;
int size;
void init_node_arr(node_arr *arr, int init_size);
'void add_node(node_arr *arr, node n);
'void remove_node(node_arr *arr, node n);
void free_node_arr(node_arr *arr);
}

class graph{
node_arr nodes;
edge_arr edges;
int node_size;
int edge_size;
void init_graph();
void add_node(graph *g, int id);
void remove_node(graph *g, int id);
void add_edge(graph *g, int src, float w, int dest);
void add_Edge(graph *g, edge e);
void remove_edge(graph *g, int src, int dest);
}

class algo{
void A(graph *g, string input);
void B(graph *g, string input);
void D(graph *g, string input);
float Shortest_path(graph *g, string input);
void TSP(graph *g, string input);
}

@enduml