@startuml

graph -> edge_list
graph -> node_list
node_list --> node
edge_list --> edge
algo --> graph


class node{
int id;
edge_list in_edges;
edge_list out_edges;
node *prev_n;
node *next_n;
node *gen_node(node *n, int id);
int set_prev_n(node *n, node *prev);
int set_next_n(node *n, node *next);
}

class edge{
int src;
float w;
int dest;
edge *prev_e;
edge *next_e;
edge *gen_edge(edge *e, int src, float w, int dest);
int set_prev_e(edge *e, edge *prev);
int set_next_e(edge *e, edge *next);
}

class edge_list{
edge *e_root;
edge *e_tail;
int size;
int init_edge_list(edge_list *e_list);
int set_e_root(edge *e);
int set_e_tail(edge *e);
int add_edge(edge_list *e_list, int src, float w, int dest);
int remove_edge(edge_list *e_list, edge e);
int free_edge_list(edge_list *e_list);
}

class node_list{
node *n_root;
node *n_tail;
int size;
int init_node_list(node_list *n_list, int init_size);
int set_n_root(node *n);
int set_n_tail(node *n);
int add_node(node_list *n_list, int id);
int remove_node(node_list *n_list, int id);
int free_node_list(node_list *n_list);
}

class graph{
node_list nodes;
edge_list edges;
int node_size;
int edge_size;
int init_graph();
'void add_node(graph *g, int id);
'void remove_node(graph *g, int id);
'void add_edge(graph *g, int src, float w, int dest);
'void add_Edge(graph *g, edge e);
'void remove_edge(graph *g, int src, int dest);
}

class algo{
int A(graph *g, string input);
int B(graph *g, string input);
int D(graph *g, string input);
float Shortest_path(graph *g, string input);
int TSP(graph *g, string input);
}

@enduml